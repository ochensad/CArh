#include <iostream>
#include <stdio.h>
#include <stdexcept>
#include <iomanip>
#ifdef _WINDOWS
#include <io.h>
#else
#include <unistd.h>
#endif


#include "experimental/xrt_device.h"
#include "experimental/xrt_kernel.h"
#include "experimental/xrt_bo.h"
#include "experimental/xrt_ini.h"

#include "gpc_defs.h"
#include "leonhardx64_xrt.h"
#include "gpc_handlers.h"

#define BURST 256

union uint64 {
    uint64_t 	u64;
    uint32_t 	u32[2];
    uint16_t 	u16[4];   
    uint8_t 	u8[8];   
};

uint64_t rand64() {
    uint64 tmp;
    tmp.u32[0] =  rand();
    tmp.u32[1] =  rand();
    return tmp.u64;
}

static void usage()
{
	std::cout << "usage: <xclbin> <sw_kernel>\n\n";
}

int main(int argc, char** argv)
{

	unsigned int cores_count = 0;
	float LNH_CLOCKS_PER_SEC;

	__foreach_core(group, core) cores_count++;

	//Assign xclbin
	if (argc < 3) {
		usage();
		throw std::runtime_error("FAILED_TEST\nNo xclbin specified");
	}

	//Open device #0
	leonhardx64 lnh_inst = leonhardx64(0,argv[1]);
	__foreach_core(group, core)
	{
		lnh_inst.load_sw_kernel(argv[2], group, core);
	}


	// /*
	//  *
	//  * ?????? ????????? ?? BURST key-value ? ??? ???????????????? ?????? ????? Global Memory Buffer 
	//  *
	//  */


	//????????? ?????? ??? ?????? gpc2host ? host2gpc ??? ??????? ???? ? ??????
	uint64_t *host2gpc_buffer[LNH_GROUPS_COUNT][LNH_MAX_CORES_IN_GROUP];
	__foreach_core(group, core)
	{
		host2gpc_buffer[group][core] = (uint64_t*) malloc(2*BURST*sizeof(uint64_t));
	}
	uint64_t *gpc2host_buffer[LNH_GROUPS_COUNT][LNH_MAX_CORES_IN_GROUP];
	__foreach_core(group, core)
	{
		gpc2host_buffer[group][core] = (uint64_t*) malloc(2*BURST*sizeof(uint64_t));
	}
    
    
	//???????? ??????? ?????? ? ???????? ??? ?????? ? lnh64
	__foreach_core(group, core)
	{
		for (int i=0;i<BURST;i++) {
			//?????? ??????? ??????? uint64_t - key
            uint64_t a = rand64()%1025;
            uint64_t b = rand64() %1025;
			host2gpc_buffer[group][core][2*i] = a;
			//?????? uint64_t - value
			host2gpc_buffer[group][core][2*i+1] = b;

		}
	}

	//?????? ??????????? insert_burst
	__foreach_core(group, core) {
		lnh_inst.gpc[group][core]->start_async(__event__(insert_burst));
	}

	//DMA ?????? ??????? host2gpc_buffer ? ?????????? ??????
	__foreach_core(group, core) {
		lnh_inst.gpc[group][core]->buf_write(BURST*2*sizeof(uint64_t),(char*)host2gpc_buffer[group][core]);
	}

	//???????? ?????????? DMA
	__foreach_core(group, core) {
		lnh_inst.gpc[group][core]->buf_write_join();
	}

	//???????? ?????????? key-value
	__foreach_core(group, core) {
		lnh_inst.gpc[group][core]->mq_send(BURST);
	}

	//?????? ??????????? ??? ????????????????? ?????? ????????? ??????
	__foreach_core(group, core) {
		lnh_inst.gpc[group][core]->start_async(__event__(search_burst));
	}

	//???????? ?????????? ??????
	unsigned int count[LNH_GROUPS_COUNT][LNH_MAX_CORES_IN_GROUP];

	__foreach_core(group, core) {
		count[group][core] = lnh_inst.gpc[group][core]->mq_receive();
	}


	//????????? ?????????? ??????
	__foreach_core(group, core) {
		lnh_inst.gpc[group][core]->buf_read(count[group][core]*2*sizeof(uint64_t),(char*)gpc2host_buffer[group][core]);
	}

	//???????? ?????????? DMA
	__foreach_core(group, core) {
		lnh_inst.gpc[group][core]->buf_read_join();
	}


	bool error = false;
	//???????? ??????????? ??????
	__foreach_core(group, core) {
		for (int i=0; i<count[group][core]; i++) {
			uint64_t elem = gpc2host_buffer[group][core][i];
            for(int j = 0; j < BURST;j++)
            {
                uint64_t orig_key = host2gpc_buffer[group][core][2*j+1];
                if (elem == orig_key)
                    error = true;
            }
		}
	}


	__foreach_core(group, core) {
		free(host2gpc_buffer[group][core]);
		free(gpc2host_buffer[group][core]);
	}
	
	

	if (!error)
		printf("???? ??????? ???????!\n");
	else
		printf("???? ???????? ? ???????!\n");


	return 0;
}